<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Avventura Preistorica di Carlo</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="manifest" href="manifest.json">
    <meta name="theme-color" content="#4ade80">
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ü¶ñ</text></svg>">
    <style>
        body { margin: 0; padding: 0; }
        #root { min-height: 100vh; }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        const DinosaurMathGame = () => {
          const [currentLevel, setCurrentLevel] = useState(1);
          const [score, setScore] = useState(0);
          const [currentQuestion, setCurrentQuestion] = useState(null);
          const [userAnswer, setUserAnswer] = useState('');
          const [feedback, setFeedback] = useState('');
          const [showFeedback, setShowFeedback] = useState(false);
          const [gameState, setGameState] = useState('menu');
          const [questionsAnswered, setQuestionsAnswered] = useState(0);
          const [attempts, setAttempts] = useState(0);
          const [showLevelComplete, setShowLevelComplete] = useState(false);
          const [learningMode, setLearningMode] = useState(false);
          const [selectedTable, setSelectedTable] = useState(1);
          const [showVisualization, setShowVisualization] = useState(false);
          const [tableExerciseMode, setTableExerciseMode] = useState(false);
          const [tableQuestionIndex, setTableQuestionIndex] = useState(1);

          const generateQuestion = () => {
            let table1, table2;
            
            if (currentLevel <= 2) {
              const easyTables = [1, 2, 5, 10];
              table1 = easyTables[Math.floor(Math.random() * easyTables.length)];
            } else if (currentLevel <= 4) {
              const mediumTables = [1, 2, 3, 4, 5, 6, 10];
              table1 = mediumTables[Math.floor(Math.random() * mediumTables.length)];
            } else {
              table1 = Math.floor(Math.random() * 10) + 1;
            }
            
            table2 = Math.floor(Math.random() * 10) + 1;
            
            return {
              num1: table1,
              num2: table2,
              answer: table1 * table2
            };
          };

          const startGame = () => {
            setGameState('playing');
            setLearningMode(false);
            setTableExerciseMode(false);
            setScore(0);
            setQuestionsAnswered(0);
            setAttempts(0);
            setShowLevelComplete(false);
            setCurrentQuestion(generateQuestion());
          };

          const startLearning = () => {
            setLearningMode(true);
            setGameState('learning');
            setTableExerciseMode(false);
            setSelectedTable(1);
            setShowVisualization(false);
          };

          const startTableExercise = () => {
            setTableExerciseMode(true);
            setGameState('tableExercise');
            setTableQuestionIndex(1);
            setAttempts(0);
            setScore(0);
            setCurrentQuestion({
              num1: selectedTable,
              num2: 1,
              answer: selectedTable * 1
            });
          };

          const goToMenu = () => {
            setGameState('menu');
            setLearningMode(false);
            setTableExerciseMode(false);
            setShowLevelComplete(false);
          };

          const goBackToLearning = () => {
            setGameState('learning');
            setTableExerciseMode(false);
            setLearningMode(true);
          };

          const checkAnswer = () => {
            const answer = parseInt(userAnswer);
            const isCorrect = answer === currentQuestion.answer;
            
            if (isCorrect) {
              const points = tableExerciseMode ? selectedTable * 5 : currentLevel * 10;
              setScore(score + points);
              setAttempts(0);
              
              if (tableExerciseMode) {
                setFeedback(`üî® Perfetto Carlo! ${selectedTable} √ó ${tableQuestionIndex} = ${currentQuestion.answer}`);
              } else {
                setFeedback("ü¶ñ Fantastico Carlo! Hai trovato i fossili!");
              }
              
              setShowFeedback(true);
              
              setTimeout(() => {
                setShowFeedback(false);
                setUserAnswer('');
                
                if (tableExerciseMode) {
                  if (tableQuestionIndex >= 10) {
                    setFeedback(`üèÜ Fantastico Carlo! Hai completato la tabellina del ${selectedTable}!`);
                    setShowFeedback(true);
                    setTimeout(() => {
                      setShowFeedback(false);
                      goBackToLearning();
                    }, 3000);
                    return;
                  } else {
                    const nextIndex = tableQuestionIndex + 1;
                    setTableQuestionIndex(nextIndex);
                    setCurrentQuestion({
                      num1: selectedTable,
                      num2: nextIndex,
                      answer: selectedTable * nextIndex
                    });
                  }
                } else {
                  setQuestionsAnswered(questionsAnswered + 1);
                  
                  if (questionsAnswered >= 9) {
                    setShowLevelComplete(true);
                    return;
                  }
                  
                  setCurrentQuestion(generateQuestion());
                }
              }, 1500);
            } else {
              setAttempts(attempts + 1);
              
              if (attempts === 0) {
                setFeedback(`ü¶¥ Non ti preoccupare Carlo! Riprova!`);
              } else if (attempts === 1) {
                setFeedback(`ü¶ñ Suggerimento: conta ${currentQuestion.num1} volte il numero ${currentQuestion.num2}!`);
              } else {
                setFeedback(`ü¶ï La risposta √® ${currentQuestion.answer}. Scrivila per continuare!`);
              }
              
              setShowFeedback(true);
              setTimeout(() => {
                setShowFeedback(false);
                setUserAnswer('');
              }, 3000);
            }
          };

          const getDinosaurForLevel = (level) => {
            const dinosaurs = {
              1: { name: "Compy", emoji: "ü¶é" },
              2: { name: "Stegosauro", emoji: "ü¶¥" },
              3: { name: "Triceratopo", emoji: "ü¶ï" },
              4: { name: "Brachiosauro", emoji: "ü¶ï" },
              5: { name: "Velociraptor", emoji: "ü¶ñ" },
              6: { name: "T-Rex", emoji: "ü¶ñ" }
            };
            return dinosaurs[level] || dinosaurs[6];
          };

          const getTableTip = (table) => {
            const tips = {
              1: "ü¶é La tabellina dell'1 √® facile come un piccolo Compy: ogni numero rimane uguale!",
              2: "ü¶ï La tabellina del 2 come le zampe dello Stegosauro: conta di 2 in 2! 2, 4, 6, 8, 10...",
              3: "ü¶ñ La tabellina del 3 come le dita del T-Rex: aggiungi sempre 3! 3, 6, 9, 12, 15...",
              4: "ü¶ï La tabellina del 4 come le zampe del Brachiosauro: 4, 8, 12, 16, 20...",
              5: "üåø La tabellina del 5 come le dita della tua mano: finisce sempre con 0 o 5!",
              6: "ü¶¥ La tabellina del 6 √® forte come un Triceratopo: combina il 2 e il 3!",
              7: "ü•ö La tabellina del 7 √® rara come un uovo di dinosauro, ma puoi farcela!",
              8: "ü¶ñ La tabellina del 8 potente come un grosso predatore: 8, 16, 24, 32, 40...",
              9: "üåã La tabellina del 9 magica come l'era Giurassica: la somma delle cifre fa sempre 9!",
              10: "ü¶ï La tabellina del 10 grande come un gigante: aggiungi solo uno zero!"
            };
            return tips[table];
          };

          const handleKeyPress = (e) => {
            if (e.key === 'Enter' && userAnswer && (gameState === 'playing' || gameState === 'tableExercise')) {
              checkAnswer();
            }
          };

          useEffect(() => {
            document.addEventListener('keypress', handleKeyPress);
            return () => document.removeEventListener('keypress', handleKeyPress);
          }, [userAnswer, gameState]);

          // SCHERMATA COMPLETAMENTO LIVELLO
          if (showLevelComplete) {
            const nextDino = getDinosaurForLevel(currentLevel + 1);
            
            return (
              <div className="min-h-screen bg-gradient-to-br from-yellow-400 to-green-500 flex items-center justify-center p-4">
                <div className="bg-white rounded-3xl shadow-2xl p-8 text-center max-w-md w-full">
                  <h2 className="text-3xl font-bold text-gray-800 mb-4">ü§† Era Completata!</h2>
                  <div className="text-6xl mb-4">{currentLevel >= 6 ? "üèÜ" : nextDino.emoji}</div>
                  
                  {currentLevel >= 6 ? (
                    <>
                      <p className="text-xl mb-4">
                        ü§† Sei un <span className="font-bold text-green-600">Paleontologo Esperto</span>!
                      </p>
                      <p className="text-xl mb-4">
                        Punteggio: <span className="font-bold text-yellow-600">{score}</span>
                      </p>
                    </>
                  ) : (
                    <>
                      <p className="text-xl mb-2">
                        Hai scoperto il <span className="font-bold text-green-600">{nextDino.name}</span>!
                      </p>
                      <p className="text-xl mb-4">
                        Punteggio: <span className="font-bold text-green-600">{score}</span>
                      </p>
                      <p className="text-gray-600 mb-6">Vuoi continuare, Carlo?</p>
                    </>
                  )}
                  
                  <div className="space-y-3">
                    {currentLevel < 6 && (
                      <button
                        onClick={() => {
                          setCurrentLevel(currentLevel + 1);
                          setQuestionsAnswered(0);
                          setShowLevelComplete(false);
                          setCurrentQuestion(generateQuestion());
                        }}
                        className="w-full bg-green-500 text-white font-bold py-3 px-6 rounded-full hover:bg-green-600"
                      >
                        ü¶ñ Continua l'Avventura!
                      </button>
                    )}
                    
                    <button
                      onClick={goToMenu}
                      className="w-full bg-blue-500 text-white font-bold py-3 px-6 rounded-full hover:bg-blue-600"
                    >
                      üè† Torna al Campo Base
                    </button>
                  </div>
                </div>
              </div>
            );
          }

          // MODALIT√Ä ESERCIZIO TABELLINA PROGRESSIVA
          if (gameState === 'tableExercise') {
            return (
              <div className="min-h-screen bg-gradient-to-br from-blue-400 via-purple-500 to-green-500 p-4">
                <div className="max-w-4xl mx-auto mb-6">
                  <div className="flex justify-between items-center bg-white/20 backdrop-blur-sm rounded-2xl p-4">
                    <div className="flex items-center space-x-4">
                      <div className="flex items-center">
                        <div className="text-2xl mr-2">ü§†</div>
                        <span className="text-white font-bold text-lg">{score}</span>
                      </div>
                    </div>
                    
                    <div className="text-center">
                      <div className="text-white font-bold text-lg">üî® Tabellina del {selectedTable}</div>
                      <div className="text-white/80 text-sm">Domanda {tableQuestionIndex} di 10</div>
                    </div>
                    
                    <button
                      onClick={goBackToLearning}
                      className="bg-red-500/70 text-white px-3 py-1 rounded-full text-sm hover:bg-red-600/70 transition"
                    >
                      ‚Üê Torna allo Studio
                    </button>
                  </div>
                </div>

                <div className="max-w-2xl mx-auto">
                  <div className="bg-white rounded-3xl shadow-2xl p-8 border-4 border-purple-300">
                    {showFeedback ? (
                      <div className="text-center">
                        <div className="text-3xl mb-4">{feedback}</div>
                        <div className="text-6xl animate-bounce">üî®</div>
                      </div>
                    ) : (
                      <div className="text-center">
                        <div className="mb-8">
                          <h3 className="text-2xl font-bold text-gray-800 mb-4">üî® Usa la paletta, Carlo!</h3>
                          <div className="text-6xl font-bold text-purple-600 mb-4">
                            {currentQuestion?.num1} √ó {currentQuestion?.num2} = ?
                          </div>
                          <div className="text-lg text-gray-600">
                            ü¶¥ {currentQuestion?.num1} scavi con {currentQuestion?.num2} fossili ciascuno
                          </div>
                        </div>

                        <div className="mb-6">
                          <input
                            type="number"
                            value={userAnswer}
                            onChange={(e) => setUserAnswer(e.target.value)}
                            className="text-4xl font-bold text-center border-4 border-purple-300 rounded-xl p-4 w-48 focus:outline-none focus:border-purple-500"
                            placeholder="?"
                            autoFocus
                          />
                        </div>

                        <button
                          onClick={checkAnswer}
                          disabled={!userAnswer}
                          className={`font-bold py-4 px-8 rounded-full text-xl transition ${
                            userAnswer
                              ? 'bg-gradient-to-r from-purple-500 to-blue-500 text-white hover:scale-105'
                              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                          }`}
                        >
                          üî® Scava con la Paletta!
                        </button>

                        <div className="mt-4">
                          <div className="flex justify-center space-x-2">
                            {Array.from({length: 10}, (_, i) => (
                              <div
                                key={i}
                                className={`w-6 h-6 rounded-full border-2 ${
                                  i < tableQuestionIndex ? 'bg-purple-500 border-purple-600' : 'bg-gray-200 border-gray-300'
                                }`}
                              />
                            ))}
                          </div>
                          <p className="text-sm text-gray-600 mt-2">Progresso tabellina del {selectedTable}</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            );
          }

          // MODALIT√Ä APPRENDIMENTO
          if (gameState === 'learning') {
            return (
              <div className="min-h-screen bg-gradient-to-br from-green-400 via-orange-400 to-yellow-500 p-4">
                <div className="max-w-4xl mx-auto">
                  <div className="bg-white/20 backdrop-blur-sm rounded-2xl p-4 mb-6">
                    <div className="flex justify-between items-center">
                      <h2 className="text-2xl font-bold text-white">ü¶ñ Laboratorio Paleontologico di Carlo</h2>
                      <button
                        onClick={goToMenu}
                        className="bg-white/20 text-white px-4 py-2 rounded-full hover:bg-white/30 transition"
                      >
                        ‚Üê Torna al Campo Base
                      </button>
                    </div>
                  </div>

                  <div className="grid md:grid-cols-3 gap-6">
                    <div className="md:col-span-1">
                      <div className="bg-white rounded-2xl p-6 shadow-xl border-4 border-orange-300">
                        <h3 className="text-xl font-bold text-gray-800 mb-4">ü¶¥ Scegli la Fossile-Tabellina</h3>
                        <div className="grid grid-cols-2 gap-2">
                          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                            <button
                              key={num}
                              onClick={() => setSelectedTable(num)}
                              className={`p-3 rounded-lg font-bold transition ${
                                selectedTable === num
                                  ? 'bg-green-500 text-white border-2 border-orange-400'
                                  : 'bg-gray-100 text-gray-700 hover:bg-green-100 border-2 border-gray-300'
                              }`}
                            >
                              {num}
                            </button>
                          ))}
                        </div>
                        
                        <div className="mt-6">
                          <button
                            onClick={() => setShowVisualization(!showVisualization)}
                            className="w-full bg-orange-500 text-white font-bold py-3 rounded-lg hover:bg-orange-600 transition border-2 border-orange-700"
                          >
                            {showVisualization ? 'üìñ Nascondi Fossili' : 'ü¶¥ Vedi i Fossili'}
                          </button>
                        </div>

                        <div className="mt-4">
                          <button
                            onClick={startTableExercise}
                            className="w-full bg-purple-600 text-white font-bold py-3 rounded-lg hover:bg-purple-700 transition border-2 border-purple-800"
                          >
                            üî® Esercizio con la Paletta!
                          </button>
                        </div>

                        <div className="mt-2">
                          <button
                            onClick={startGame}
                            className="w-full bg-green-600 text-white font-bold py-3 rounded-lg hover:bg-green-700 transition border-2 border-green-800"
                          >
                            üéÆ Sfida Mista!
                          </button>
                        </div>
                      </div>
                    </div>

                    <div className="md:col-span-2">
                      <div className="bg-white rounded-2xl p-6 shadow-xl max-h-96 overflow-y-auto border-4 border-green-300">
                        <h3 className="text-2xl font-bold text-green-600 mb-4">
                          ü¶ñ Fossile-Tabellina del {selectedTable}
                        </h3>
                        
                        <div className="mb-6 p-4 bg-yellow-50 rounded-lg border-2 border-yellow-300">
                          <p className="text-orange-800 font-medium">{getTableTip(selectedTable)}</p>
                        </div>

                        {!showVisualization ? (
                          <div className="space-y-3">
                            {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(num => (
                              <div
                                key={num}
                                className="flex items-center justify-between p-3 bg-green-50 rounded-lg border-2 border-green-200"
                              >
                                <span className="text-xl font-bold text-gray-700">
                                  ü¶ï {selectedTable} √ó {num}
                                </span>
                                <span className="text-2xl font-bold text-green-600">
                                  = {selectedTable * num} ü¶¥
                                </span>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <div className="space-y-4">
                            <h4 className="text-lg font-bold text-gray-700 text-center">
                              ü¶¥ Conta i Fossili negli Scavi
                            </h4>
                            <div className="max-h-64 overflow-y-auto space-y-4">
                              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(i => (
                                <div
                                  key={i}
                                  className="p-4 bg-white rounded-lg shadow-md border-2 border-orange-200"
                                >
                                  <div className="text-center mb-3">
                                    <span className="text-xl font-bold text-green-600">
                                      {selectedTable} √ó {i} = {selectedTable * i}
                                    </span>
                                  </div>
                                  <div className="flex flex-wrap gap-2 justify-center">
                                    {Array.from({length: selectedTable}, (_, group) => (
                                      <div
                                        key={group}
                                        className="flex flex-wrap gap-1 p-2 bg-green-100 rounded-lg border border-green-300"
                                      >
                                        {Array.from({length: i}, (_, fossil) => (
                                          <div key={fossil} className="text-lg">ü¶¥</div>
                                        ))}
                                      </div>
                                    ))}
                                  </div>
                                  <div className="text-center mt-2 text-sm text-gray-600">
                                    ü¶¥ {selectedTable} scavi con {i} fossili ciascuno = {selectedTable * i} fossili totali
                                  </div>
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          }

          // MENU PRINCIPALE
          if (gameState === 'menu') {
            return (
              <div className="min-h-screen bg-gradient-to-br from-green-400 via-orange-500 to-red-500 flex items-center justify-center p-4">
                <div className="bg-white rounded-3xl shadow-2xl p-8 text-center max-w-md w-full">
                  <div className="mb-6">
                    <h1 className="text-4xl font-bold text-gray-800 mb-2">ü¶ñ Avventura Preistorica di Carlo</h1>
                    <p className="text-gray-600">Scopri i dinosauri mentre impari le tabelline!</p>
                  </div>
                  
                  <div className="mb-8">
                    <div className="flex justify-center space-x-4 mb-4">
                      <span className="text-3xl">ü¶ï</span>
                      <span className="text-3xl">ü¶ñ</span>
                      <span className="text-3xl">ü¶¥</span>
                    </div>
                    <p className="text-sm text-gray-600">6 ere preistoriche da esplorare</p>
                  </div>
                  
                  <div className="space-y-4">
                    <button
                      onClick={startGame}
                      className="w-full bg-gradient-to-r from-green-500 to-orange-500 text-white font-bold py-4 px-8 rounded-full text-xl hover:scale-105 transition transform"
                    >
                      ü§† Carlo, sei pronto a diventare un paleontologo?
                    </button>
                    
                    <button
                      onClick={startLearning}
                      className="w-full bg-gradient-to-r from-orange-500 to-yellow-500 text-white font-bold py-4 px-8 rounded-full text-xl hover:scale-105 transition transform"
                    >
                      ü¶¥ Studia i Fossili
                    </button>
                    
                    <button
                      onClick={() => {
                        setCurrentLevel(1);
                        setScore(0);
                        setQuestionsAnswered(0);
                      }}
                      className="w-full bg-red-500 text-white font-bold py-3 px-6 rounded-full hover:bg-red-600 transition"
                    >
                      üîÑ Reset Progressi
                    </button>
                  </div>
                </div>
              </div>
            );
          }

          // SCHERMATA DI GIOCO
          const currentDino = getDinosaurForLevel(currentLevel);

          return (
            <div className="min-h-screen bg-gradient-to-br from-green-400 via-orange-500 to-yellow-500 p-4">
              <div className="max-w-4xl mx-auto mb-6">
                <div className="flex justify-between items-center bg-white/20 backdrop-blur-sm rounded-2xl p-4">
                  <div className="flex items-center space-x-4">
                    <div className="flex items-center">
                      <div className="text-2xl mr-2">ü§†</div>
                      <span className="text-white font-bold text-lg">{score}</span>
                    </div>
                  </div>
                  
                  <div className="text-center">
                    <div className="text-white font-bold text-lg flex items-center justify-center">
                      <span className="mr-2">{currentDino.emoji}</span>
                      Era {currentLevel}
                    </div>
                    <div className="text-white/80 text-sm">{currentDino.name}</div>
                    <div className="text-white/80 text-xs">{questionsAnswered}/10 scoperte</div>
                  </div>
                  
                  <button
                    onClick={goToMenu}
                    className="bg-red-500/70 text-white px-3 py-1 rounded-full text-sm hover:bg-red-600/70 transition"
                  >
                    üè† Menu
                  </button>
                </div>
              </div>

              <div className="max-w-2xl mx-auto">
                <div className="bg-white rounded-3xl shadow-2xl p-8">
                  {showFeedback ? (
                    <div className="text-center">
                      <div className="text-3xl mb-4">{feedback}</div>
                      <div className="text-6xl animate-bounce">{currentDino.emoji}</div>
                    </div>
                  ) : (
                    <div className="text-center">
                      <div className="mb-8">
                        <h3 className="text-2xl font-bold text-gray-800 mb-4">
                          ü¶¥ Quanti fossili hai trovato, Carlo?
                        </h3>
                        <div className="text-6xl font-bold text-green-600 mb-4">
                          {currentQuestion?.num1} √ó {currentQuestion?.num2} = ?
                        </div>
                        <div className="text-lg text-gray-600">
                          ü¶¥ {currentQuestion?.num1} scavi con {currentQuestion?.num2} fossili ciascuno
                        </div>
                      </div>

                      <div className="mb-6">
                        <input
                          type="number"
                          value={userAnswer}
                          onChange={(e) => setUserAnswer(e.target.value)}
                          className="text-4xl font-bold text-center border-4 border-green-300 rounded-xl p-4 w-48 focus:outline-none focus:border-green-500"
                          placeholder="?"
                          autoFocus
                        />
                      </div>

                      <button
                        onClick={checkAnswer}
                        disabled={!userAnswer}
                        className={`font-bold py-4 px-8 rounded-full text-xl transition ${
                          userAnswer
                            ? 'bg-gradient-to-r from-green-500 to-orange-500 text-white hover:scale-105'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        }`}
                      >
                        üîç Scava e Scopri!
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        };

        ReactDOM.render(<DinosaurMathGame />, document.getElementById('root'));
    </script>
</body>
</html>
